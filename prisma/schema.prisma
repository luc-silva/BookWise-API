generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Author {
  id              Int       @id @unique(map: "id") @default(autoincrement())
  first_name      String    @db.VarChar(100)
  last_name       String    @db.VarChar(100)
  about           String?   @db.VarChar(500)
  nationality     String    @db.VarChar(100)
  birth_date      DateTime  @db.Date
  has_author_died Boolean
  death_date      DateTime? @db.Date
  Book            Book[]
}

model Book {
  id                    Int                     @id @unique(map: "id") @default(autoincrement())
  author_id             Int
  pages                 Int
  title                 String                  @db.VarChar(150)
  description           String?                 @db.VarChar(500)
  store_url             String?                 @db.VarChar(500)
  published_date        DateTime                @db.Date
  Author                Author                  @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Book_ibfk_1")
  BookGenreJunction     BookGenreJunction[]     @ignore
  BookshelfBookJunction BookshelfBookJunction[] @ignore
  Review                Review[]
  Topic                 Topic[]

  @@index([author_id], map: "author_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model BookGenreJunction {
  book_id  Int
  genre_id Int
  Book     Book  @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookGenreJunction_ibfk_1")
  Genre    Genre @relation(fields: [genre_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookGenreJunction_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([genre_id], map: "genre_id")
  @@ignore
}

model Bookshelf {
  id                    Int                     @id @unique(map: "id") @default(autoincrement())
  user_id               Int
  title                 String                  @db.VarChar(80)
  deletable             Boolean
  shareable             Boolean
  UserAccount           UserAccount             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Bookshelf_ibfk_1")
  BookshelfBookJunction BookshelfBookJunction[] @ignore

  @@index([user_id], map: "user_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model BookshelfBookJunction {
  bookshelf_id Int
  book_id      Int
  Bookshelf    Bookshelf @relation(fields: [bookshelf_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookshelfBookJunction_ibfk_1")
  Book         Book      @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "BookshelfBookJunction_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([bookshelf_id], map: "bookshelf_id")
  @@ignore
}

model Comment {
  id          Int         @id @unique(map: "id") @default(autoincrement())
  user_id     Int
  referer     Int
  type        String      @db.VarChar(30)
  text        String      @db.VarChar(250)
  UserAccount UserAccount @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Comment_ibfk_1")

  @@index([user_id], map: "user_id")
}

model Genre {
  id                Int                 @id @unique(map: "id") @default(autoincrement())
  name              String              @db.VarChar(100)
  description       String?             @db.VarChar(200)
  BookGenreJunction BookGenreJunction[] @ignore
}

model GroupDetails {
  id                Int                 @id @unique(map: "id") @default(autoincrement())
  founder_id        Int
  created_at        DateTime            @db.DateTime(0)
  name              String              @db.VarChar(120)
  details           String?             @db.VarChar(500)
  UserAccount       UserAccount         @relation(fields: [founder_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "GroupDetails_ibfk_1")
  GroupUserJunction GroupUserJunction[] @ignore

  @@index([founder_id], map: "founder_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model GroupUserJunction {
  group_id     Int
  user_id      Int
  GroupDetails GroupDetails @relation(fields: [group_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "GroupUserJunction_ibfk_1")
  UserAccount  UserAccount  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "GroupUserJunction_ibfk_2")

  @@index([group_id], map: "group_id")
  @@index([user_id], map: "user_id")
  @@ignore
}

model Image {
  id      Int    @id @unique(map: "id") @default(autoincrement())
  type    String @db.VarChar(20)
  referer Int
  data    Bytes  @db.Blob
}

model Post {
  id              Int               @id @unique(map: "id") @default(autoincrement())
  user_id         Int
  text            String            @db.VarChar(500)
  UserAccount     UserAccount       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Post_ibfk_1")
  PostTagJunction PostTagJunction[] @ignore

  @@index([user_id], map: "user_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model PostTagJunction {
  post_id Int
  tag_id  Int
  Post    Post @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "PostTagJunction_ibfk_1")
  Tag     Tag  @relation(fields: [tag_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "PostTagJunction_ibfk_2")

  @@index([post_id], map: "post_id")
  @@index([tag_id], map: "tag_id")
  @@ignore
}

model Review {
  id          Int         @id @unique(map: "id") @default(autoincrement())
  user_id     Int
  book_id     Int
  score       Int
  text        String?     @db.VarChar(250)
  UserAccount UserAccount @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Review_ibfk_1")
  Book        Book        @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Review_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model Tag {
  id              Int               @id @unique(map: "id") @default(autoincrement())
  trend           String            @db.VarChar(100)
  PostTagJunction PostTagJunction[] @ignore
}

model Topic {
  id          Int         @id @unique(map: "id") @default(autoincrement())
  user_id     Int
  book_id     Int
  text        String      @db.VarChar(500)
  title       String      @db.VarChar(100)
  UserAccount UserAccount @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Topic_ibfk_1")
  Book        Book        @relation(fields: [book_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "Topic_ibfk_2")

  @@index([book_id], map: "book_id")
  @@index([user_id], map: "user_id")
}

model UserAccount {
  id                Int                 @id @unique(map: "id") @default(autoincrement())
  email             String              @unique(map: "email") @db.VarChar(120)
  password          String              @db.VarChar(56)
  created_at        DateTime            @db.DateTime(0)
  first_name        String              @db.VarChar(100)
  middle_name       String              @db.VarChar(100)
  city              String              @db.VarChar(150)
  country           String              @db.VarChar(150)
  about_text        String?             @db.VarChar(500)
  Bookshelf         Bookshelf[]
  Comment           Comment[]
  GroupDetails      GroupDetails[]
  GroupUserJunction GroupUserJunction[] @ignore
  Post              Post[]
  Review            Review[]
  Topic             Topic[]
}
